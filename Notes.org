#+TODO: TODO(t) IDEA(i) | FEED(f) DONE(d)

* Setitem
to create new items different methods are possible.

we'll use add for now as it feels to be the most flexible approach,
albeit not so dicttree alike.

** Separate function add
bonus: can return new key
malus: not very intuitive/dicttreeish

team = github["orgs"]["chaoflownet"]["teams"]["Owners"]
team.add("nuit")

** Mismatch between key and required parameter allowed
repoissues = github["repo"]["chaoflow"]["<repo>"]["issues"]
repoissues["title"] = {}
-> creates an issue with title being "title"
which is then accessible via some new issueno on
repoissues[issueno]

bonus: feels a bit like a dicttree
malus: it's confusing, when setitem and getitem use different keys
** Specific key/object
just pass in -1 as a kind of placeholder key

a bit nicer: have a class newobject and pass in an instance of this
class, like this one avoids collisions and the post/put can even set
the new key on the object, f.ex.

new = newobject()
repoissues[new] = { 'title': "test" }
issue = new.obj

if issuenumber is not interesting, it's not much heavier like:
repoissues[None] = { ... }
* Pull requests
** TODO Commits
commits of a pull request can be accessed directly from git by adding 
remote.origin.fetch=+refs/pull/*/head:refs/remotes/origin/pr/*
to the origin section of .git/config. then,
git log origin/pr/{number}
shows the commits of the pull request number.

so we should provide the means to add the extra branches and call git
log from gh.

* Completion
** Setup instructions
zshrc or zshenv should contain (with adapted paths, where necessary)
#+begin_src sh
fpath=(~/dev/tpv.github/zsh-completion.d $fpath)
export fpath
compinit
#+end_src

the actual zsh definitions lie in zsh-completion.d/_gh and are
generated by a run of update-completions.sh (also called by make
bootstrap).

while developing it makes sense to run
#+begin_src sh
source update-completions.sh
#+end_src
because this also takes care of updating all function definitions
already loaded into the shell environment.
* Flo feedback
** DONE singular for subcommands analog to git
gh issue  vs  gh issues
** DONE `gh org` to list all organizations I'm a member of
** IDEA `gh show` super command?
*** `gh show #350` short for `gh org show #350`

*** `gh show <user>` short for `gh user show <user>`

*** `gh show +<organization>` short for `gh org show <organization>`

** DONE `gh help` to be equivalent as gh --help
only for toplevel as a convenience
** DONE `gh issue` to list all issues
I remember you mentioning this as todo.
** DONE --repo to default to current repository
** DONE (for now) I would disable pager-support to get a feel when it would be handy
** IDEA `gh issue list ... --mine` falsly requires argument
needs an argument to support multiple filters. there is no switch
which has an optional argument.
** IDEA `gh repo` to list
*** all my repos
*** all repos of the organization of the repo I am in at the moment?
maybe better to have a parent directory for the organization with a
config file that sets the organization.
*** all repos of the entity specified `gh repo list chaoflownet`
Is there a github name for "organization" and "user"? "owner" maybe?
or "location"?
** TODO config
*** DONE config files
**** ~/.ghconfig
foo = 1
bar = 1

**** parent directories .ghconfig
bar = 2
baz = 2

**** current directory .ghconfig
baz = 3
xyz = 3

--> foo = 1, bar = 2, baz = 3, xyz = 3

*** DONE context
**** current repository

*** DONE cli options also via config
[repo list]
user = ...

[issue]
... = ...

[issue list]
assignee = ...

*** TODO dict that gets items from list of dicts
readonly for now

*** TODO show configured values in help text
** DONE cli flag to print http requests and responses
-d (--debug) for method calls in backend
-dd (--debug --debug) for method calls and http requests and responses
** DONE `gh issue list` without args throws exception
% ./bin/gh issue list       
Traceback (most recent call last):
  File "./bin/gh", line 9, in <module>
    load_entry_point('tpv.nix==0', 'console_scripts', 'gh')()
  File "/home/cfl/dev/tpv/plumbum/plumbum/cli/application.py", line 385, in run
    inst, retcode = subapp.run(argv, exit = False)
  File "/home/cfl/dev/tpv/plumbum/plumbum/cli/application.py", line 385, in run
    inst, retcode = subapp.run(argv, exit = False)
  File "/home/cfl/dev/tpv/plumbum/plumbum/cli/application.py", line 381, in run
    retcode = inst.main(*tailargs)
  File "/home/cfl/dev/tpv/tpv.github/src/tpv/github/cli/issue.py", line 74, in __call__
    repo = repo_type(self.repo)
  File "/home/cfl/dev/tpv/tpv.cli/src/tpv/cli/__init__.py", line 82, in __call__
    return self.func(*args, **kwargs)
  File "/home/cfl/dev/tpv/tpv.github/src/tpv/github/cli/types.py", line 21, in repo_type
    raise ValueError("Remote origin is not from github.")
ValueError: Remote origin is not from github.

`gh issue list` to be equivalent to `gh issue`

% git remote -v
origin	git@github.com:chaoflownet/tpv.github (fetch)
origin	git@github.com:chaoflownet/tpv.github (push)

** DONE `gh issue`
*** show only open issues (--state defaults to open)
*** short format
#id Title @assignee

*** verbose format
the current default format
** TODO disable colors when stdout is redirected
** FEED investigate plumbum to support naming PARAM and VALUE
--mentioned <user>
--repo <user>/<repo>

plumbum automatically uppercases the argname. <USER>/<REPO> looks VERY
heavy, so we decided to just hide this information alltogether.
* Bugs
** TODO GhTeamMembers doesn't provide a __getitem__ or __contains__ method
