#+TODO: TODO | DONE

* Setitem
to create new items different methods are possible.

we'll use add for now as it feels to be the most flexible approach,
albeit not so dicttree alike.

** Separate function add
bonus: can return new key
malus: not very intuitive/dicttreeish

team = github["orgs"]["chaoflownet"]["teams"]["Owners"]
team.add("nuit")

** Mismatch between key and required parameter allowed
repoissues = github["repo"]["chaoflow"]["<repo>"]["issues"]
repoissues["title"] = {}
-> creates an issue with title being "title"
which is then accessible via some new issueno on
repoissues[issueno]

bonus: feels a bit like a dicttree
malus: it's confusing, when setitem and getitem use different keys
** Specific key/object
just pass in -1 as a kind of placeholder key

a bit nicer: have a class newobject and pass in an instance of this
class, like this one avoids collisions and the post/put can even set
the new key on the object, f.ex.

new = newobject()
repoissues[new] = { 'title': "test" }
issue = new.obj

if issuenumber is not interesting, it's not much heavier like:
repoissues[None] = { ... }
* Pull requests
** TODO Commits
commits of a pull request can be accessed directly from git by adding 
remote.origin.fetch=+refs/pull/*/head:refs/remotes/origin/pr/*
to the origin section of .git/config. then,
git log origin/pr/{number}
shows the commits of the pull request number.

so we should provide the means to add the extra branches and call git
log from gh.

* Completion
** Setup instructions
zshrc or zshenv should contain (with adapted paths, where necessary)
#+begin_src sh
fpath=(~/dev/tpv.github/zsh-completion.d $fpath)
export fpath
compinit
#+end_src

the actual zsh definitions lie in zsh-completion.d/_gh and are
generated by a run of update-completions.sh (also called by make
bootstrap).

while developing it makes sense to run
#+begin_src sh
source update-completions.sh
#+end_src
because this also takes care of updating all function definitions
already loaded into the shell environment.
* Flo feedback
** DONE singular for subcommands analog to git
gh issue  vs  gh issues
** DONE `gh org` to list all organizations I'm a member of
** `gh org show` not specific to organizations, but also work for users
gh org could show more information specific to organisations. this is
still on the todo though.

** `gh show #350` Show bug #350 in current repo?

isn't that: gh issue show 350
do we want a free text short cut? # -> issueno, !
** DONE `gh help` to be equivalent as gh --help
only for toplevel as a convenience
** DONE `gh issue` to list all issues
I remember you mentioning this as todo.
** DONE --repo to default to current repository
** DONE (for now) I would disable pager-support to get a feel when it would be handy
** `gh issue list ... --mine` falsly requires argument
needs an argument to support multiple filters. there is no switch
which has an optional argument.
